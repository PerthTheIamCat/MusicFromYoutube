// main.js
require('dotenv').config();
const { spawn } = require('child_process');
const { Client, GatewayIntentBits, Events } = require('discord.js');
const {
    joinVoiceChannel,
    getVoiceConnection,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus,
    StreamType
} = require('@discordjs/voice');

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildVoiceStates]
});

const queueMap = new Map();

client.once(Events.ClientReady, () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isCommand()) return;
    const { commandName, options, member, guild } = interaction;
    const voiceChannel = member.voice.channel;

    if ((commandName === 'join' || commandName === 'play') && !voiceChannel) {
        return interaction.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö');
    }

    if (commandName === 'join') {
        joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: guild.id,
            adapterCreator: guild.voiceAdapterCreator,
        });
        return interaction.reply(`‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á **${voiceChannel.name}** ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    if (commandName === 'play') {
        let url = options.getString('url');
        if (!/^https?:\/\//i.test(url)) url = 'https://' + url;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á queue ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        let serverQueue = queueMap.get(guild.id);
        if (!serverQueue) {
            const connection = joinVoiceChannel({
                channelId: voiceChannel.id,
                guildId: guild.id,
                adapterCreator: guild.voiceAdapterCreator,
            });
            const player = createAudioPlayer();
            connection.subscribe(player);
            player.on(AudioPlayerStatus.Idle, () => processQueue(guild.id));
            player.on('error', () => processQueue(guild.id));
            serverQueue = { connection, player, songs: [] };
            queueMap.set(guild.id, serverQueue);
        }

        serverQueue.songs.push(url);
        await interaction.reply(`üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏Ñ‡∏¥‡∏ß: ${url}`);
        if (serverQueue.player.state.status === AudioPlayerStatus.Idle) {
            processQueue(guild.id);
        }
    }

    if (commandName === 'leave') {
        const serverQueue = queueMap.get(guild.id);
        if (serverQueue) {
            serverQueue.connection.destroy();
            queueMap.delete(guild.id);
            return interaction.reply('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß');
        }
        return interaction.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ');
    }
});

client.login(process.env.BOT_TOKEN);


/**
 * ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ yt-dlp.exe + ffmpeg
 */
async function processQueue(guildId) {
    const serverQueue = queueMap.get(guildId);
    if (!serverQueue) return;

    const { connection, player, songs } = serverQueue;

    if (songs.length === 0) {
        connection.destroy();
        queueMap.delete(guildId);
        return;
    }

    const nextUrl = songs.shift();

    // spawn yt-dlp ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á bestaudio ‡∏≠‡∏≠‡∏Å stdout
    const yt = spawn('yt-dlp.exe', [
        '-f', 'bestaudio',
        '-o', '-',      // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á stdout
        nextUrl
    ], { stdio: ['ignore', 'pipe', 'inherit'] });

    // ‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö ffmpeg ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô raw PCM ‡∏´‡∏£‡∏∑‡∏≠ Opus ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const ffmpeg = spawn('ffmpeg', [
        '-i', 'pipe:0',
        '-f', 's16le',        // raw PCM
        '-ar', '48000',       // sample rate 48kHz
        '-ac', '2',           // stereo
        'pipe:1'
    ], { stdio: ['pipe', 'pipe', 'inherit'] });

    yt.stdout.pipe(ffmpeg.stdin);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á resource ‡∏à‡∏≤‡∏Å ffmpeg.stdout
    const resource = createAudioResource(ffmpeg.stdout, {
        inputType: StreamType.Raw
    });

    player.play(resource);
    console.log('‚ñ∂Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô:', nextUrl);
}
